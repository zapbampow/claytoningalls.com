---
type Props = {
  columns: number;
  rows: number;
  cellWidth?: number;
  maskGradient?: string;
  opacity?: number;
};
const {
  columns,
  rows,
  cellWidth = 20,
  maskGradient = "radial-gradient(closest-side, black 50%, transparent)",
  opacity = 0.1,
} = Astro.props;
const width = `${columns * cellWidth}px`;
const height = `${rows * cellWidth}px`;
const gridBorder = `1px solid hsl(0 0% 80% / ${opacity})`;
---

<div class="visible-grid">
  {
    Array.from({ length: columns * rows }).map((_, i) => {
      return (
        <div
          class:list={[
            "grid-cell",
            {
              topRow: i < columns,
              bottomRow: i > columns * rows - columns - 1,
              leftColumn: i % columns === 0,
              rightColumn: i % columns === columns - 1,
            },
          ]}
        />
      );
    })
  }
</div>

<style
  define:vars={{
    columns,
    rows,
    cellWidth,
    width,
    height,
    maskGradient,
    gridBorder,
  }}
>
  .visible-grid {
    width: var(--width);
    height: var(--height);
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    grid-template-rows: repeat(var(--rows), 1fr);
    mask-image: var(--maskGradient);
    pointer-events: none;
  }

  .visible-grid:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .grid-cell {
    width: var(--cellWidth);
    height: var(--cellWidth);
    border: var(--gridBorder);
  }

  .grid-cell.topRow {
    border-top: none;
  }
  .grid-cell.bottomRow {
    border-bottom: none;
  }
  .grid-cell.leftColumn {
    border-left: none;
  }
  .grid-cell.rightColumn {
    border-right: none;
  }
</style>
