---
const { modalClass, openId, closeId } = Astro.props;
---

<dialog class:list={[`modal`, modalClass]}>
  <div class="modal-content">
    <slot />
  </div>
</dialog>

<script is:inline define:vars={{ modalClass, openId, closeId }}>
  const openButton = document.querySelector(
    `.openModalBtn${openId && `#${openId}`}`
  );
  const closeButton = document.querySelector(
    `.closeModalBtn${closeId && `#${closeId}`}`
  );
  const modal = document.querySelector(`.modal`);

  const closeModal = () => {
    modal.setAttribute("closing", "");
    modal.addEventListener(
      "animationend",
      () => {
        modal.close();
        modal.removeAttribute("closing");
      },
      { once: true }
    );
  };

  openButton.addEventListener("click", () => {
    modal.showModal();

    const searchInput = modal.querySelector("input");
    searchInput.focus();
  });

  closeButton.addEventListener("click", () => {
    closeModal();
  });

  modal.addEventListener("click", (e) => {
    if (e.target.nodeName !== "DIALOG") return;
    closeModal();
  });
</script>

<style>
  .modal-content {
    position: relative;
    padding: 1rem 0.5rem;
    scrollbar-gutter: stable both-edges;
    scrollbar-width: thin;
    overflow-y: auto;
    border-radius: var(--radius);
    background: var(--background-gradient);
    border: 1px solid #331c51;
    /**
      the horizontal padding + the thin scrollbar + gutter on both edges 
      add up to 1rem to match the vertical padding of 1rem
    */
  }
  .modal {
    --radius: 1rem;
    width: 50ch;
    max-width: 50ch;
    position: relative;
    opacity: 0;
    translate: 0 -1em;
    background: transparent;
    border-radius: var(--radius);
    box-shadow:
      0 3px 5px -2px hsl(220 40% 2% / calc(10% + 3%)),
      0 7px 14px -5px hsl(220 40% 2% / calc(10% + 5%)),
      0 0 0 100vw hsl(0 0 0 / 0.5);

    transition:
      opacity 0.5s,
      translate 0.5s,
      overlay 0.5s allow-discrete,
      display 0.5s allow-discrete;

    overflow: hidden;

    &::backdrop {
      background: hsl(0 0% 0% / 0.5);
      opacity: 0;
    }
  }

  .modal[open] {
    animation:
      fadeIn 0.3s forwards,
      enter 0.3s forwards;

    /* &::backdrop {
        opacity: 1;
        animation: fadeIn 0.3s forwards;
      } */
  }

  .modal[closing] {
    display: block;
    inset: 0;
    animation: fadeOut 0.3s forwards;
    pointer-events: none;

    /* &::backdrop {
        animation: fadeOut 0.3s forwards;
      } */
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes enter {
    0% {
      transform: translateY(10%);
    }
    100% {
      transform: translateY(0%);
    }
  }
</style>
