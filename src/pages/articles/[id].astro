---
import type { GetStaticPaths } from "astro";
import { render, getCollection, type CollectionEntry } from "astro:content";
import FullScreenLayout from "@layouts/FullScreenLayout.astro";
import BlogLayout from "@layouts/BlogLayout.astro";
import dayjs from "@lib/extendedDayjs";

export const getStaticPaths = (async () => {
  const posts = await getCollection("articles");

  return posts.map((article: CollectionEntry<"articles">) => {
    const pathData = {
      params: {
        id: article.id,
      },
      props: {
        article,
      },
    };

    return pathData;
  });
}) satisfies GetStaticPaths;

type Props = {
  article: CollectionEntry<"articles">;
};
const { article } = Astro.props;
const { Content } = await render(article);

const sameUpdatePublishDates =
  dayjs(article.data.publishedAt).format("YYYYMMDD") ===
  dayjs(article.data.updatedAt).format("YYYYMMDD");
const dateType = sameUpdatePublishDates ? "Published" : "Updated";
const date = dayjs(article.data.updatedAt).utc().format("ll");
---

<FullScreenLayout title={article.data.title || "Snippets"}>
  <BlogLayout>
    <h1>
      {article.data.title}
      {
        article.data.status === "draft" && (
          <span class="uppercase text-sm">(draft) </span>
        )
      }
    </h1>
    <Content />
    <p class="text-right text-base">{dateType} {date}</p>
  </BlogLayout>
</FullScreenLayout>
