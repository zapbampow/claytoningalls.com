---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import dayjs from "dayjs";

import { capitalize, singularize } from "@lib/stringUtils.ts";

import FullScreenLayout from "@layouts/FullScreenLayout.astro";
import BlogLayout from "@layouts/BlogLayout.astro";
import SimplePagination from "@components/navigation/SimplePagination.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const articles = await getCollection("articles");
  const snippets = await getCollection("snippets");

  const posts = [...articles, ...snippets].sort((a, b) => {
    const dateA = dayjs(a.data.publishedAt).unix();
    const dateB = dayjs(b.data.publishedAt).unix();
    return dateB - dateA;
  });
  return paginate(posts, { pageSize: 4 });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
console.log(page);

const pageTitle = "Blog";
---

<FullScreenLayout title={pageTitle}>
  <BlogLayout>
    <h1>{pageTitle}</h1>
    <ul class="blog-list">
      {
        page.data.map((post) => (
          <li>
            <a href={`/${post.collection}/${post.slug}`}>
              <p class="post-type">
                {singularize(post.collection).toUpperCase()}
              </p>
              <h2>{post.data.title}</h2>
              <div class="flex align-center gap-4">
                {post.data.tags.length > 0 && (
                  <ul class="tag-list">
                    {post.data.tags.map((tag) => (
                      <li class="tag">{capitalize(tag)}</li>
                    ))}
                  </ul>
                )}
                <p class="date">
                  {dayjs(post.data.publishedAt).format("MMM D, YYYY")}
                </p>
              </div>
              {post.data?.description && (
                <p class="description">{post.data.description}</p>
              )}
            </a>
          </li>
        ))
      }
    </ul>

    <SimplePagination page={page} baseUrl="blog" />
  </BlogLayout>

  <style>
    ul.blog-list {
      margin-block: 2rem;
      display: grid;
      gap: 2rem;

      --radius: 0;
      --content-bg: hsl(0 0% 100% / 0.75);
      --content-text: #331c51;
      --box-shadow: 3px 3px var(--accent);

      & > li {
        position: relative;
        border-left: 3px solid var(--accent);
        padding-left: 8px;
        .post-type {
          font-size: 0.75rem;
        }

        .date {
          font-size: 0.75rem;
        }

        .description {
          font-size: 1rem;
          margin-block-start: 0.5rem;
        }
        h2 {
          text-wrap: pretty;
          transition: color 0.3s ease-in-out;
        }
        &:hover h2 {
          /* color: var(--accent); */
        }

        &:before {
          content: "";
          width: calc(100% + 2rem);
          height: calc(100% + 2rem);
          position: absolute;
          top: -1rem;
          left: -1rem;
          border-radius: 1rem;
          background-color: hsl(0 0% 100% / 0.05);
          border-top: 1px solid hsl(0 0% 100% / 0.1);
          opacity: 0;
          z-index: -1;
          transition: opacity 0.3s ease-in-out;
        }

        &:hover::before {
          opacity: 1;
        }
      }
    }

    ul.tag-list {
      display: flex;
      gap: 0.25rem;

      & > li.tag {
        font-size: 0.75rem;
        padding: 0 0.5rem;
        border-radius: 1rem;
        background-color: transparent;
        border: 1px solid var(--text-faded);
        color: var(--text-faded);
        line-height: 0.85rem;
      }
    }

    @media screen and (max-width: 700px) {
      ul {
        gap: 3rem;
        margin-inline: 1rem;
      }

      li:before {
        opacity: 1;
      }

      h2 {
        color: var(--accent);
      }
    }
  </style>
</FullScreenLayout>
